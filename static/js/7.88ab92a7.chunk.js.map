{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.js","utils/validators/validators.js","components/Login/Login.jsx"],"names":["module","exports","FormControl","input","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","restProps","child","Input","createField","name","placeholder","component","validate","text","required","value","maxLengthCreator","maxLength","length","minLengthCreator","minLength","maxLength30","minLength2","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","type","captchaUrl","src","alt","formSummaryError","connect","state","auth","isAuth","loginThunkCreator","logoutThunkCreator","to","formData","email","password","rememberMe","captcha"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,+LCI9GC,EAAc,SAAC,GAA8C,EAA7CC,MAA8C,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SACpDC,EAAWH,GAAWC,EAE5B,OACE,yBAAKG,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOJ,MAAQ,MACpE,6BACGC,GAEDC,GAAY,8BAAOF,KAKdM,EAAW,SAAAC,GAAU,IACzBV,EAAoCU,EAApCV,MAAuBW,GAAaD,EAA7BT,KAA6BS,EAAvBE,MADW,YACYF,EADZ,2BAE/B,OAAO,kBAACX,EAAgBW,EAAO,8CAAcV,EAAWW,MAG7CE,EAAQ,SAAAH,GAAU,IACtBV,EAAoCU,EAApCV,MAAuBW,GAAaD,EAA7BT,KAA6BS,EAAvBE,MADQ,YACeF,EADf,2BAE5B,OAAO,kBAACX,EAAgBW,EAAO,2CAAWV,EAAWW,MAG1CG,EAAc,SAACC,EAAMC,EAAaC,EAAWC,GAAqC,IAA3BR,EAA0B,uDAAlB,GAAIS,EAAc,uDAAP,GACrF,OACE,6BACE,kBAAC,IAAD,eAAOJ,KAAMA,EACXC,YAAaA,EACbC,UAAWA,EACXC,SAAUA,GACNR,IACHS,K,iCCpCT,sGAAO,IAAMC,EAAW,SAAAC,GACtB,IAAIA,EACJ,MAAO,qBAGIC,EAAmB,SAAAC,GAAS,OAAI,SAAAF,GAC3C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,cAInBE,EAAmB,SAAAC,GAAS,OAAI,SAAAL,GAC3C,GAAIA,EAAMG,OAASE,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,iCCXhC,+FAYMC,EAAcL,YAAiB,IAC/BM,EAAaH,YAAiB,GAoB9BI,EAAiBC,YAAU,CAC/BC,KAAM,SADeD,EAlBL,SAACpB,GACjB,OACE,0BAAMsB,SAAUtB,EAAMuB,cACjBnB,YAAY,QAAS,QAASD,IAAO,CAACO,IAAUO,EAAaC,IAC7Dd,YAAY,WAAY,WAAYD,IAAO,CAACO,IAAUO,EAAaC,GAAa,CAACM,KAAM,aACvFpB,YAAY,aAAc,KAAMD,IAAO,KAAM,CAACqB,KAAM,YAAa,eAEjExB,EAAMyB,YAAc,yBAAKC,IAAK1B,EAAMyB,WAAYE,IAAI,eACpD3B,EAAMyB,YAAcrB,YAAY,UAAW,qBAAsBD,IAAO,CAACO,MAEzEV,EAAMP,OAAS,yBAAKG,UAAWC,IAAO+B,kBAAmB5B,EAAMP,OAClE,6BACE,8CAgCOoC,uBAPS,SAACC,GACvB,MAAO,CACLL,WAAYK,EAAMC,KAAKN,WACvBO,OAAQF,EAAMC,KAAKC,UAIiB,CAACC,sBAAmBC,wBAA7CL,EAtBD,SAAC7B,GAKb,OAAIA,EAAMgC,OACD,kBAAC,IAAD,CAAUG,GAAI,aAGhB,6BACL,qCACA,kBAAChB,EAAD,CAAgBG,SAVD,SAACc,GAChBpC,EAAMiC,kBAAkBG,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UASrDf,WAAYzB,EAAMyB","file":"static/js/7.88ab92a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__168z0\",\"error\":\"FormsControls_error__9ujUt\",\"formSummaryError\":\"FormsControls_formSummaryError__2ZOxo\"};","import React from 'react'\r\nimport { Field } from 'redux-form'\r\n\r\nimport styles from './FormsControls.module.css'\r\n\r\nexport const FormControl = ({input, meta: {touched, error}, children}) => {\r\n  const hasError = touched && error\r\n\r\n  return (\r\n    <div className={styles.formControl + ' ' + (hasError ? styles.error : ' ')}>\r\n      <div>\r\n        {children}\r\n      </div>\r\n      { hasError && <span>{error}</span> }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Textarea = props => {\r\n  const {input, meta, child, ...restProps} = props\r\n  return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = props => {\r\n  const {input, meta, child, ...restProps} = props\r\n  return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (name, placeholder, component, validate, props = {}, text = '') => {\r\n  return (\r\n    <div>\r\n      <Field name={name} \r\n        placeholder={placeholder} \r\n        component={component} \r\n        validate={validate}\r\n        {...props}\r\n      />{text}\r\n    </div>\r\n  )\r\n}","export const required = value => {\r\n  if (value) return undefined\r\n  return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = maxLength => value => {\r\n  if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n  return undefined\r\n}\r\n\r\nexport const minLengthCreator = minLength => value => {\r\n  if (value.length < minLength) return `Max length is ${minLength} symbols`\r\n  return undefined\r\n}","import React from 'react'\r\nimport { reduxForm } from 'redux-form'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport { loginThunkCreator, logoutThunkCreator } from '../../redux/auth-reducer'\r\n\r\nimport { Input, createField } from '../common/FormsControls/FormsControls'\r\nimport { required, minLengthCreator, maxLengthCreator } from '../../utils/validators/validators'\r\n\r\nimport styles from '../common/FormsControls/FormsControls.module.css'\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\nconst minLength2 = minLengthCreator(2)\r\n\r\nconst LoginForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n        {createField('email', 'Email', Input, [required, maxLength30, minLength2])}\r\n        {createField('password', 'Password', Input, [required, maxLength30, minLength2], {type: 'password'})}\r\n        {createField('rememberMe', null, Input, null, {type: 'checkbox'}, 'remember me')} \r\n\r\n        {props.captchaUrl && <img src={props.captchaUrl} alt='captchapic' />}\r\n        {props.captchaUrl && createField('captcha', 'Enter symbols here', Input, [required])}\r\n\r\n        {props.error && <div className={styles.formSummaryError}>{props.error}</div>}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n  form: 'login'\r\n})(LoginForm)\r\n\r\nconst Login = (props) => {\r\n  const onSubmit = (formData) => {\r\n    props.loginThunkCreator(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n  }\r\n\r\n  if (props.isAuth) {\r\n    return <Redirect to={'/profile'}/>\r\n  }\r\n\r\n  return <div>\r\n    <h3>Login</h3>\r\n    <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n  </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {loginThunkCreator, logoutThunkCreator})(Login)\r\n"],"sourceRoot":""}